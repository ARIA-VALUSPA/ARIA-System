/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.aria.core.demo;

import eu.aria.util.types.EMaxData;
import vib.core.intentions.FMLFileReader;
import vib.core.intentions.IntentionPerformer;

import javax.swing.*;
import java.io.File;
import java.util.*;

/**
 *
 * @author adg
 */
public class EMaxThresholdDialog extends javax.swing.JFrame {

    private static final int TURN_IN_SEC = 3;
    private static final int REPEAT_TIME_MS = 100;
    private static final double SCALE = 100.d;
    private static final int MIN = -500, MAX = 500;

    private static final String RECORDING = "Recording", PLAYING = "Playing", WAITING = "Waiting";

    public static final String ANGE = "anger", DISG = "disgust", FEAR = "fear",
            HAPP = "happiness", SADN = "sadness", SURP = "surprised";

    public static final String[] EMOTIONS = {ANGE, DISG, FEAR, HAPP, SADN, SURP};

    private HashMap<String, File> filePaths = new HashMap<>();
    private HashMap<String, JSlider> sliders = new HashMap<>();

    private enum Status { INIT, REC, PLAY }

    private HashMap<Integer, ArrayList<EMaxData.EMaxFace>> faces = new HashMap<>();

    private Status status = Status.INIT;

    private FMLFileReader fmlFileReader = new FMLFileReader();

    private Task task;

    private Comparator<DoubleStringEntry> reverseComparator = Collections.reverseOrder(new TupleComparator());

    /**
     * Creates new form EMaxThresholdDialog
     */
    public EMaxThresholdDialog() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        toggleAnger = new javax.swing.JCheckBox();
        toggleDisgust = new javax.swing.JCheckBox();
        toggleFear = new javax.swing.JCheckBox();
        toggleHappy = new javax.swing.JCheckBox();
        toggleSadness = new javax.swing.JCheckBox();
        toggleSurprise = new javax.swing.JCheckBox();
        sliderDisgust = new javax.swing.JSlider();
        sliderAnger = new javax.swing.JSlider();
        sliderFear = new javax.swing.JSlider();
        sliderHappy = new javax.swing.JSlider();
        sliderSadness = new javax.swing.JSlider();
        sliderSurprise = new javax.swing.JSlider();
        labelAnger = new javax.swing.JLabel();
        labelDisgust = new javax.swing.JLabel();
        labelFear = new javax.swing.JLabel();
        labelSadness = new javax.swing.JLabel();
        labelHappy = new javax.swing.JLabel();
        labelSurprise = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        statusBox = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toggleAnger.setSelected(true);
        toggleAnger.setText("Anger");

        toggleDisgust.setSelected(true);
        toggleDisgust.setText("Disgust");

        toggleFear.setSelected(true);
        toggleFear.setText("Fear");

        toggleHappy.setSelected(true);
        toggleHappy.setText("Happy");

        toggleSadness.setSelected(true);
        toggleSadness.setText("Sadness");

        toggleSurprise.setSelected(true);
        toggleSurprise.setText("Surprise");

        labelAnger.setText("0");

        labelDisgust.setText("0");

        labelFear.setText("0");

        labelSadness.setText("0");

        labelHappy.setText("0");

        labelSurprise.setText("0");
        labelSurprise.setPreferredSize(new java.awt.Dimension(36, 14));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toggleSurprise)
                    .addComponent(toggleAnger)
                    .addComponent(toggleFear)
                    .addComponent(toggleDisgust)
                    .addComponent(toggleHappy)
                    .addComponent(toggleSadness))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sliderSurprise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelSurprise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sliderAnger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelAnger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sliderDisgust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelDisgust, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sliderFear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelFear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sliderHappy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelHappy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sliderSadness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelSadness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(toggleAnger)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toggleDisgust))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sliderAnger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelAnger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sliderDisgust, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDisgust, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(sliderFear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toggleFear))
                    .addComponent(labelFear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(sliderHappy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toggleHappy))
                    .addComponent(labelHappy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(sliderSadness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toggleSadness))
                    .addComponent(labelSadness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(sliderSurprise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toggleSurprise))
                    .addComponent(labelSurprise, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Start");

        statusBox.setText("  ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(statusBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(statusBox))
                .addGap(16, 16, 16)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void init() {
        sliderAnger.addChangeListener(e ->  updateText((JSlider) e.getSource(), labelAnger));
        sliderDisgust.addChangeListener(e ->  updateText((JSlider) e.getSource(), labelDisgust));
        sliderFear.addChangeListener(e ->  updateText((JSlider) e.getSource(), labelFear));
        sliderHappy.addChangeListener(e ->  updateText((JSlider) e.getSource(), labelHappy));
        sliderSadness.addChangeListener(e ->  updateText((JSlider) e.getSource(), labelSadness));
        sliderSurprise.addChangeListener(e ->  updateText((JSlider) e.getSource(), labelSurprise));

        initSlider(sliderAnger);
        initSlider(sliderDisgust);
        initSlider(sliderFear);
        initSlider(sliderHappy);
        initSlider(sliderSadness);
        initSlider(sliderSurprise);

        toggleAnger.addActionListener(e -> updateCheckBox((AbstractButton) e.getSource(), sliderAnger));
        toggleDisgust.addActionListener(e -> updateCheckBox((AbstractButton) e.getSource(), sliderDisgust));
        toggleFear.addActionListener(e -> updateCheckBox((AbstractButton) e.getSource(), sliderFear));
        toggleHappy.addActionListener(e -> updateCheckBox((AbstractButton) e.getSource(), sliderHappy));
        toggleSadness.addActionListener(e -> updateCheckBox((AbstractButton) e.getSource(), sliderSadness));
        toggleSurprise.addActionListener(e -> updateCheckBox((AbstractButton) e.getSource(), sliderSurprise));

        jButton1.addActionListener(e -> {
            switch (status) {
                case INIT:
                    setStatusRec();
                    break;
                case REC:
                case PLAY:
                    setStatusInit();
                    break;
            }
        });
    }

    private synchronized void setStatusInit() {
        status = Status.INIT;
        statusBox.setText(WAITING);
        jButton1.setEnabled(true);
        if (task != null) {
            task.stop();
            task= null;
        }
    }

    private synchronized void setStatusRec() {
        status = Status.REC;
        statusBox.setText(RECORDING);
        jButton1.setEnabled(false);
        if (task != null) {
            task.stop();
            task= null;
        }
        task = new Task();
        task.time = TURN_IN_SEC * 1000;
        task.repeat = REPEAT_TIME_MS;
        task.after = () -> {
            sendResult();
            setStatusPlay();
        };
        task.start();
    }

    private synchronized void setStatusPlay() {
        status = Status.PLAY;
        statusBox.setText(PLAYING);
        if (task != null) {
            task.stop();
            task = null;
        }
        task = new Task();
        task.time = TURN_IN_SEC * 1000;
        task.repeat = REPEAT_TIME_MS;
        task.after = this::setStatusInit;
        task.start();
    }

    private synchronized void sendResult() {
        final HashMap<Integer, ArrayList<EMaxData.EMaxFace>> values = faces;
        faces = new HashMap<>();
        new Thread(() -> {
            ArrayList<EMaxData.EMaxFace> bestList = null;
            for (ArrayList<EMaxData.EMaxFace> list : values.values()) {
                if (bestList == null || bestList.size() < list.size()) {
                    bestList = list;
                }
            }
            if (bestList != null) {
                double anger = 0, disgust = 0, fear = 0, happines = 0, sadness = 0, surprised = 0;
                int angerC = 0, disgustC = 0, fearC = 0, happinesC = 0, sadnessC = 0, surprisedC = 0;
                for (EMaxData.EMaxFace face : bestList) {
                    double angerThreshold = getSliderValue(sliderAnger);
                    if (face.getAnger() > angerThreshold) {
                        anger += face.getAnger() - angerThreshold;
                        angerC++;
                    }
                    double disgustThreshold = getSliderValue(sliderDisgust);
                    if (face.getDisgust() > disgustThreshold) {
                        disgust += face.getDisgust() - disgustThreshold;
                        disgustC++;
                    }
                    double fearThreshold = getSliderValue(sliderFear);
                    if (face.getFear() > fearThreshold) {
                        fear += face.getFear() - fearThreshold;
                        fearC++;
                    }
                    double happinessThreshold = getSliderValue(sliderHappy);
                    if (face.getHappiness() > happinessThreshold) {
                        happines += face.getHappiness() - happinessThreshold;
                        happinesC++;
                    }
                    double sadnessThreshold = getSliderValue(sliderSadness);
                    if (face.getSadness() > sadnessThreshold) {
                        sadness += face.getSadness() - sadnessThreshold;
                        sadnessC++;
                    }
                    double surpriseThreshold = getSliderValue(sliderSurprise);
                    if (face.getSurprised() > surpriseThreshold) {
                        surprised += face.getSurprised() - surpriseThreshold;
                        surprisedC++;
                    }
                }
                double[] emValues = {anger, disgust, fear, happines, sadness, surprised};

                ArrayList<DoubleStringEntry> list = new ArrayList<>();
                for (int i = 0; i < emValues.length; i++) {
                    list.add(new DoubleStringEntry(emValues[i], EMOTIONS[i]));
                }
                list.sort(reverseComparator);
                System.out.println("list: " + list);
                File fml = null;
                String emName = null;

                for (DoubleStringEntry entry : list) {
                    fml = filePaths.get(entry.getValue());
                    emName = entry.getValue();
                    JSlider emSlider = sliders.get(emName);
                    if (fml != null && emSlider != null && emSlider.isEnabled()) {
                        break;
                    }
                }

                if (fml != null) {
                    System.out.println("Loading file: " + fml.getAbsolutePath());
                    statusBox.setText("Playing " + emName);
                    fmlFileReader.load(fml.getAbsolutePath());
                }
            }
        }).start();
    }

    public void showWindow() {
        setTitle("EMax thresholds");
        setVisible(true);
    }

    private void updateText(JSlider slider, JLabel label) {
        label.setText(String.format("%.3f", getSliderValue(slider)));
    }

    private void updateCheckBox(AbstractButton button, JSlider slider) {
        slider.setEnabled(button.getModel().isSelected());
    }

    private void initSlider(JSlider slider) {
        slider.setMinimum(MIN);
        slider.setMaximum(MAX);
        slider.setValue(0);
    }

    private double getSliderValue(JSlider slider) {
        return slider.getValue() / SCALE;
    }

    public double getAnger() {
        return getSliderValue(sliderAnger);
    }

    public double getDisgust() {
        return getSliderValue(sliderDisgust);
    }

    public double getFear() {
        return getSliderValue(sliderFear);
    }

    public double getHappiness() {
        return getSliderValue(sliderHappy);
    }

    public double getSadness() {
        return getSliderValue(sliderSadness);
    }

    public double getSurprised() {
        return getSliderValue(sliderSurprise);
    }

    public boolean isEmotionEnabled(String emotion) {
        JSlider slider = sliders.get(emotion);
        return slider != null && slider.isEnabled();
    }

    public synchronized void onEMaxData(EMaxData eMaxData) {
        if (status != Status.REC) {
            return;
        }
        for (EMaxData.EMaxFace face : eMaxData.getFaces()) {
            ArrayList<EMaxData.EMaxFace> list = faces.get(face.getId());
            if (list == null) {
                list = new ArrayList<>();
            }
            list.add(face);
            faces.put(face.getId(), list);
        }
    }

    public void addEmotionFile(String emotion, String path) {
        if (!Arrays.asList(EMOTIONS).contains(emotion)) {
            System.out.println(emotion + " not a valid emotion!");
            return;
        }
        File file = new File(path);
        if (!file.exists()) {
            System.out.println("file: '" + file.getAbsolutePath() + "' does not exist!");
            return;
        }

        filePaths.put(emotion, file);

        switch (emotion) {
            case ANGE:
                sliders.put(ANGE, sliderAnger);
                break;
            case DISG:
                sliders.put(DISG, sliderDisgust);
                break;
            case FEAR:
                sliders.put(FEAR, sliderFear);
                break;
            case HAPP:
                sliders.put(HAPP, sliderHappy);
                break;
            case SADN:
                sliders.put(SADN, sliderSadness);
                break;
            case SURP:
                sliders.put(SURP, sliderSurprise);
                break;
        }
    }

    public void addIntentionPerformer(IntentionPerformer performer) {
        fmlFileReader.addIntentionPerformer(performer);
    }

    public static void main(String[] args) {
        new EMaxThresholdDialog().showWindow();
    }

    private class Task {

        long time = 5000, repeat = 100;
        Runnable repeatable, after;

        private volatile boolean running = false, started = false;

        public void start() {
            if (started) {
                return;
            }
            started = true;
            final long time = this.time, repeat = this.repeat;
            final Runnable repeatable = this.repeatable, after = this.after;
            running = true;
            new Thread(() -> {
                long end = System.currentTimeMillis() + time;

                while (running && end > System.currentTimeMillis()) {
                    if (repeatable != null) {
                        repeatable.run();
                    }
                    try {
                        Thread.sleep(repeat);
                    } catch (InterruptedException e) {  }
                }
                if (running && after != null) {
                    after.run();
                }
            }).start();
        }

        public void stop() {
            running = false;
        }
    }

    public static class DoubleStringEntry implements HashMap.Entry<Double, String> {

        private Double key;
        private String value;

        public DoubleStringEntry(Double key, String value) {
            this.key = key;
            this.value = value;
        }

        @Override
        public Double getKey() {
            return key;
        }

        @Override
        public String getValue() {
            return value;
        }

        @Override
        public String setValue(String value) {
            return null;
        }

        @Override
        public String toString() {
            return "DoubleStringEntry: {key: " + key + ", value: \"" + value + "\" }";
        }
    }

    public static class TupleComparator implements Comparator<DoubleStringEntry> {

        @Override
        public int compare(DoubleStringEntry o1, DoubleStringEntry o2) {
            if (o1.getKey() < o2.getKey()) {
                return -1;
            } else if (o1.getKey().doubleValue() == o2.getKey().doubleValue()) {
                return 0;
            } else {
                return 1;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelAnger;
    private javax.swing.JLabel labelDisgust;
    private javax.swing.JLabel labelFear;
    private javax.swing.JLabel labelHappy;
    private javax.swing.JLabel labelSadness;
    private javax.swing.JLabel labelSurprise;
    private javax.swing.JSlider sliderAnger;
    private javax.swing.JSlider sliderDisgust;
    private javax.swing.JSlider sliderFear;
    private javax.swing.JSlider sliderHappy;
    private javax.swing.JSlider sliderSadness;
    private javax.swing.JSlider sliderSurprise;
    private javax.swing.JLabel statusBox;
    private javax.swing.JCheckBox toggleAnger;
    private javax.swing.JCheckBox toggleDisgust;
    private javax.swing.JCheckBox toggleFear;
    private javax.swing.JCheckBox toggleHappy;
    private javax.swing.JCheckBox toggleSadness;
    private javax.swing.JCheckBox toggleSurprise;
    // End of variables declaration//GEN-END:variables
}
